plugins {
    id "com.google.protobuf" version "$protobufGradleOluginVersion"
    id "application"
}

dependencies {
    implementation project(":util-lib")
    implementation project(":customer-service:customer-api")
    implementation project(":executor-service:executor-api")
    implementation(
            "com.google.protobuf:protoc:$protobufVersion",
    )
    compileOnly("org.projectlombok:lombok")
    [
            "com.google.dagger:dagger-compiler:$daggerVersion",
            "org.projectlombok:lombok:$lombokVersion",
    ].forEach {
        annotationProcessor(it)
        testAnnotationProcessor(it)
    }
    protobuf files("src/main/resources/proto")
    testImplementation(
            "org.junit.jupiter:junit-jupiter:$junitVersion",

            "org.testcontainers:postgresql:$testcontainersPostgresqlVersion",
            "com.redislabs:testcontainers-redis:$testcontainersRedisVersion",
            "org.liquibase:liquibase-core:$liquibaseVersion",
            "org.postgresql:postgresql:$postgresqlVersion",

            "org.projectlombok:lombok:$lombokVersion"
    )
    testImplementation project(":user-db")
    testImplementation project(":order-db")
    testImplementation project(":executor-db")
    testImplementation project(":customer-db")
    testAnnotationProcessor("org.projectlombok:lombok:$lombokVersion")
}

String generatedProtoFilesPath = "${projectDir}/build/generated/sources/proto"

protobuf {
    generatedFilesBaseDir = "${generatedProtoFilesPath}"
    protoc {
        artifact = "com.google.protobuf:protoc:$protobufVersion"
    }
}

sourceSets.main.java {
    srcDirs(
            "${generatedProtoFilesPath}/main/java",
            "${generatedProtoFilesPath}/main/grpc",
    )
}

application.getMainClass().set("ru.craftysoft.orderingsystem.orderprocessing.Application")

test {
    useJUnitPlatform {
        excludeEngines "junit-vintage"
    }
    testLogging {
        events "passed", "skipped", "failed"
        exceptionFormat "full"
    }
}